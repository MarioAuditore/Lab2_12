#include "Header.h"

int main()
{
	setlocale(LC_ALL, "Russian");
	int N = 1, M = 1; //переменнные выбора
	double Time;

	cout << "Создать файл?\n" << "1-да\n" << "0-нет\n";
	int F = InputF();
	while (M != 0) {
		cout << "Выберите действие:\n" << "1- Пирамидальная сортировка\n" << "2-Шейкер\n" << "3-Сравнение двух\n" << "0-выход\n" << "Ваш выбор:";
		M = InputM(); // Ввод переменной для выбора действия
		switch (M)
		{
		case 1:
			while (true) { // Бесконечный цикл для сравнения длительности сортировок на данных различных размеров
				cout << "Введите количество объктов для сортировки (от 1 до 60000) или 0, чтобы закончить сравнение: ";
				N = InputN(); // Ввод количества объектов для сортировки
				if (N == 0) // Если N равна 0 выходим из бесконечного цикла
					break;
				team* Pyramid = NULL;
				Pyramid = new team[N]; // Выделяем память для массива пирамидальной сортировки
				if (ClassInitialization(Pyramid, N))// Инициализируем массив объектов для пирамидальной сортировки данными из файла DataBase.csv
				{
					return 0;
				}
				Time = PyramidSort(Pyramid, N); // Сортируем пирамидальной сортировкой
				if (F == 1)
					CreateNewFile(Pyramid, N);
				cout << "Результат пирамидальной сортировки: " << Time << " секунд" << endl;
			}
			break; // Окончание выполнение кейса
		case 2:
		{
			while (true) { // Бесконечный цикл для сравнения длительности сортировок на данных различных размеров
				cout << "Введите количество объктов для сортировки (от 1 до 6000) или 0, чтобы закончить сравнение: ";
				N = InputN(); // Ввод количества объектов для сортировки
				if (N == 0) // Если N равна 0 выходим из бесконечного цикла
					break;
				team* Shaker = NULL;
				Shaker = new team[N]; // Выделяем память для массива пирамидальной сортировки
				ClassInitialization(Shaker, N); // Инициализируем массив объектов для пирамидальной сортировки данными из файла DataBase.csv
				Time = Shakersort(Shaker, N); // Сортируем пирамидальной сортировкой
				if (F == 1)
					CreateNewFile(Shaker, N);
				cout << "Результат пирамидальной сортировки: " << Time << " секунд" << endl;
			}
			break; // Окончание выполнение кейса
		}
		case 3:
		{
			while (true) { // Бесконечный цикл для сравнения длительности сортировок на данных различных размеров
				cout << "Введите количество объктов для сортировки (от 1 до 6000) или 0, чтобы закончить сравнение: ";
				N = InputN(); // Ввод количества объектов для сортировки
				if (N == 0) // Если N равна 0 выходим из бесконечного цикла
					break;
				team* Pyramid = NULL;
				Pyramid = new team[N]; // Выделяем память для массива пирамидальной сортировки
				ClassInitialization(Pyramid, N); // Инициализируем массив объектов для пирамидальной сортировки данными из файла DataBase.csv
				Time = PyramidSort(Pyramid, N); // Сортируем пирамидальной сортировкой
				cout << "Результат пирамидальной сортировки: " << Time << " секунд" << endl;

				team* Shaker = NULL;
				Shaker = new team[N]; // Выделяем память для массива пирамидальной сортировки
				ClassInitialization(Shaker, N); // Инициализируем массив объектов для пирамидальной сортировки данными из файла DataBase.csv
				Time = Shakersort(Shaker, N); // Сортируем пирамидальной сортировкой
				cout << "Результат шейкер сортировки: " << Time << " секунд" << endl;

				break;
			}

		}
		}
	}
}

